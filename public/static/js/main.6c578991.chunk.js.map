{"version":3,"sources":["logo.png","components/Banner/Banner.jsx","components/pagination/Pagination.jsx","components/Card/Card.jsx","components/screens/HomePage.jsx","components/screens/Details/DetailsPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Banner","useState","nasaData","setNasaData","useEffect","a","Axios","result","data","fetchData","console","log","url","className","style","backgroundImage","media_type","loop","width","playing","config","youtube","playerVars","disablekb","src","alt","copyright","title","date","explanation","Pagination","previousPage","nextPage","paginate","totalPages","pagenumbers","i","push","onClick","map","pageNumber","allLunches","gql","Card","currentPage","setCurrentPage","useQuery","loading","error","items","launches","reversedArray","slice","sort","b","date_local","indexOflastPost","indexOfFirstPost","currentPosts","Math","ceil","length","launch","name","color","success","borderRadius","links","patch","small","format","to","id","num","HomePage","LUNCH_DETAILS","DetailsPage","props","match","params","variables","fetchPolicy","item","tableRow","text","textColor","height","flickr","original","backgroundSize","backgroundRepeat","backgroundPosition","pathname","wikipedia","target","details","getRocket","country","company","description","App","logo","display","margin","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c578991.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.8ea28c8d.png\";","import Axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport \"./banner.scss\";\r\n\r\nconst Banner = () => {\r\n  const [nasaData, setNasaData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await Axios(\r\n        \"https://api.nasa.gov/planetary/apod?api_key=BsLuuv59dAjQFwut1nCBjwCFlmXaXMBKUNiOJYQA\"\r\n      );\r\n      setNasaData(result.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(nasaData);\r\n\r\n  console.log(nasaData.url);\r\n  return (\r\n    <div\r\n      className=\"banner_container\"\r\n      style={{\r\n        backgroundImage: `url(${nasaData.url})`,\r\n      }}\r\n    >\r\n      {/* <ReactPlayer url={nasaData.url} /> */}\r\n      {nasaData.media_type === \"video\" ? (\r\n        <ReactPlayer\r\n          url={nasaData.url}\r\n          loop=\"true\"\r\n          width=\"100%\"\r\n          playing=\"true\"\r\n          config={{ youtube: { playerVars: { disablekb: 1} } }}\r\n        />\r\n      ) : (\r\n        <img src={nasaData.url} alt={nasaData.copyright} />\r\n      )}\r\n      <div className=\"banner_row\">\r\n        <h4>{nasaData.title}</h4>\r\n        <p className=\"date_para\">\r\n          {nasaData.date} &#169; {nasaData.copyright}{\" \"}\r\n        </p>\r\n      </div>\r\n      <p className=\"nasaData_explanation\">{nasaData.explanation}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\nimport \"./pagination.scss\";\r\n\r\nconst Pagination = ({ previousPage, nextPage, paginate, totalPages }) => {\r\n  const pagenumbers = [];\r\n\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pagenumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <ul>\r\n        <li onClick={previousPage}>&laquo;</li>\r\n        {pagenumbers.map((pageNumber, i) => (\r\n          <li  key ={pageNumber}onClick={() => paginate(pageNumber)}>{pageNumber}</li>\r\n        ))}\r\n        <li onClick={nextPage}>&raquo;</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport {Link} from 'react-router-dom'\r\nimport \"./display_card.scss\";\r\nimport Pagination from \"../pagination/Pagination\";\r\nimport Moment from \"react-moment\";\r\n\r\nconst allLunches = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      id\r\n      name\r\n      success\r\n      date_local\r\n      details\r\n      links {\r\n        patch{\r\n          small\r\n        }\r\n        flickr {\r\n          original\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Card = () => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const postPerpage = 15;\r\n  const { loading, error, data} = useQuery(allLunches , {  \r\n    // fetchPolicy:\"cache-only\"\r\n  });\r\n\r\n  if (!data && loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n// console.log(data)\r\n  const items  = data.launches;\r\n  const reversedArray = items\r\n    .slice()\r\n    .sort((a, b) => b.date_local - a.date_local);\r\n  // console.log(reversedArray);\r\n  // console.log(items);\r\n\r\n  const indexOflastPost = currentPage * postPerpage;\r\n  const indexOfFirstPost = indexOflastPost - postPerpage;\r\n  const currentPosts = reversedArray.slice(indexOfFirstPost, indexOflastPost);\r\n\r\n  const totalPages = Math.ceil(items.length / postPerpage);\r\n\r\n  // console.log(currentPosts);\r\n  // console.log(currentPage);\r\n\r\n  const nextPage = () => {\r\n    if (currentPage < totalPages) setCurrentPage(currentPage + 1);\r\n  };\r\n\r\n  const previousPage = () => {\r\n    if (currentPage > 1) setCurrentPage(currentPage - 1);\r\n  };\r\n\r\n  const pageinate = (num) => {\r\n    setCurrentPage(num);\r\n  };\r\n\r\n  // const getMoreData = (id) => {\r\n  //   history.push(`/details/:${id}`)\r\n  //   // console.log(\"launch id :\", id);\r\n  // };\r\n\r\n\r\n  return (\r\n    <div className=\"main_container\">\r\n      <h4>List of satelite launches</h4>\r\n      <div className=\"card_wrapper\">\r\n      {currentPosts.map((launch, i) => (\r\n        <div\r\n          key={launch.id}\r\n          className=\"display_card\"\r\n        >\r\n          <div className=\"first_row\">\r\n            <div className=\"mission_name\">\r\n              <p>Mission Name:</p>\r\n              <h2> {launch.name}</h2>\r\n              <h4\r\n                style={{\r\n                  color: launch.success ? \"#05a005\" : \"#ff0066\",\r\n                  borderRadius:\"8px\",\r\n                  // maxWidth:\"50%\"               \r\n                }}\r\n              >\r\n                <span>&#8226;</span> {launch.success ? \"Success\" : \"Failure\"}\r\n              </h4>\r\n            </div>\r\n            <div className=\"logo_size\">\r\n              {launch.links.patch.small ? <img src={launch.links.patch.small}  alt=\"rocket-logo\"/>: <h4>No-Image</h4> }\r\n            </div>\r\n          </div>\r\n          <p>Launch Date: <Moment format=\"MMMM-DD, YYYY HH:mm a, dddd\">{launch.date_local}</Moment></p>\r\n          <div className=\"more_details\">\r\n          <Link to={`/details/${launch.id}`} className=\"more_detail_button\" >More details</Link>\r\n          </div>\r\n         \r\n        </div>\r\n      ))}\r\n </div>\r\n      <Pagination\r\n        paginate={pageinate}\r\n        totalPages={totalPages}\r\n        nextPage={nextPage}\r\n        previousPage={previousPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Banner from \"../Banner/Banner\";\r\nimport Card from \"../Card/Card\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div>\r\n      <Banner />\r\n      <Card />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport \"./details.scss\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LUNCH_DETAILS = gql`\r\n  query LUNCH_DETAILS($id: String!) {\r\n    launch(id: $id) {\r\n      id\r\n      name\r\n      details\r\n      date_local\r\n      success\r\n      links {\r\n        wikipedia\r\n        patch {\r\n          small\r\n        }\r\n        flickr {\r\n          original\r\n        }\r\n      }\r\n      getRocket {\r\n        id\r\n        name\r\n        country\r\n        company\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DetailsPage = (props) => {\r\n  const { id } = props.match.params;\r\n  // console.log(id)\r\n  const { loading, error, data } = useQuery(LUNCH_DETAILS || [], {\r\n    variables: { id },\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n\r\n  if (!data & loading) {\r\n    return <p>Loading ...</p>;\r\n  }\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n  const item = data.launch;\r\n\r\n  const tableRow = (text, data, textColor) => {\r\n    return (\r\n      <tr>\r\n        <th>{text}</th>\r\n        <td style={{ color: textColor }}> {data}</td>\r\n      </tr>\r\n    );\r\n  };\r\n  return (\r\n    <div\r\n      className=\"detail_main_container\"\r\n      style={{\r\n        height: \"100vh\",\r\n        backgroundImage: `linear-gradient(rgba(255,255,255, .8), rgb(255,255,255)), url(${item.links.flickr.original[0]})`,\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"center\",\r\n        // background: `linear-gradient(rgba(0,0,0,0), rgba(0,0,0,1)), url(${item.links.flickr.original[0]}), #1c1c1c, cover, no-repeat`\r\n      }}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"img_col\">\r\n          <img src={item.links.patch.small} alt=\"rocket_image\" />\r\n        </div>\r\n        <div className=\"info_col\">\r\n          <table>\r\n            <tbody>\r\n\r\n           \r\n            {tableRow(\"Mission name :\", item.name)}\r\n            {tableRow(\r\n              \"Date :\",\r\n              <Moment format=\"MMMM-DD, YYYY HH:mm a, dddd\">\r\n                {item.date_local}\r\n              </Moment>\r\n            )}\r\n            {tableRow(\r\n              \"Mission Status :\",\r\n              (item.success ? \"Success\" : \"Failure\"), \r\n              (item.success ? \"#05a005\" : \"#ff0066\")\r\n            )}\r\n            {tableRow(\"Wikipedia :\", (<Link  style ={{color:\"blue\"}} to={{pathname:item.links.wikipedia}} target=\"_blank\"> {item.links.wikipedia}</Link>))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <h2>Mission Details</h2>\r\n        <p>{item.details}</p>\r\n      </div>\r\n\r\n      {/* <img src={item.links.flickr.original[0]} alt={item.name}/> */}\r\n      <div className=\"rocket_details row\">\r\n        <h2>Rocket Details</h2>\r\n        <table width=\"100%\">\r\n        {tableRow(\"Rocket name\", item.getRocket.name)}\r\n        {tableRow(\"Country\", item.getRocket.country)}\r\n        {tableRow(\"Company\", item.getRocket.company)}\r\n        {tableRow(\"Description\", item.getRocket.description)}\r\n        </table>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailsPage;\r\n","import \"./App.scss\";\nimport logo from \"./logo.png\";\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport HomePage from \"./components/screens/HomePage\";\nimport DetailsPage from \"./components/screens/Details/DetailsPage\";\n\nfunction App() {\n  return (\n    <div className=\"App bg-primary\">\n      <img\n        src={logo}\n        alt=\"space x logo\"\n        style={{ width: \"200px\", display: \"block\", margin: \"auto\" }}\n      />\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/details/:id\" exact component={DetailsPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./scss/custom.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}